package main

import "fmt"

// Функция, которая группирует элементы массива на две части:
// 1. Сначала береться опорный элемент (pivot), относительно
// которого будет происходить группировка (например, последний элемент массива)
// 2. Потом массив группируется, где слева элементы меньше опорного, а справо - больше
func partition(arr []int, low int, high int) int {
	// Определяем опорный элемент
	pivot := arr[high]

	// Проходимся по массиву. Если встречаем элемент меньший pivot, то
	// переносим его в левую часть массива, меняя с i-ым элементом, иначе идем дальше
	i := low - 1
	for j := low; j < high; j++ {
		if arr[j] < pivot {
			i++
			swap(arr, i, j)
		}
	}

	// Здесь элемент на i+1 позиции будет первым элементом большим или равным pivot
	swap(arr, i+1, high)
	return i + 1
}

// Функиця, меняющая местами элементы массива
func swap(arr []int, i int, j int) {
	arr[i], arr[j] = arr[j], arr[i]
}

// Фукнция быстрой сортировки
func quickSort(arr []int, low int, high int) {
	if low < high {
		pi := partition(arr, low, high)

		// Элемент на позиции pi является опорный, считаем, что он уже отсортирован.
		// Теперь необходимо отсортировать левую и правую части массива
		quickSort(arr, low, pi-1)
		quickSort(arr, pi+1, high)
	}
}

func main() {
	arr := []int{10, 7, 8, 4, 1, 5, 10, 4, -3, 0, 12}

	fmt.Printf("Начальное состояние: %v\n", arr)
	quickSort(arr, 0, len(arr)-1)
	fmt.Printf("Отсортированный массив: %v\n", arr)
}
